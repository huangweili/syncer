version: 1.2

consumerId: code


input:
  masters:
  - connection:
      address: ${MYSQL_ADDR}
      port: 3306
    scheduler: mod
    repos:
    - name: "test.*"
      entities:
      - name: correctness
        fields: [time, news_id, currency, total, quantity, type, name, unit] # default id is not null, other can be null
      - name: types
        fields: [tinyint, bigint, char, varchar, text, decimal, double, timestamp]
      - name: news
        fields: [title, content, thumb_content, tags, affair_id, modify_time, plate_type, state, alliance_id, number, plate_sub_type]
    - name: "simple"
      entities:
      - name: simple_type
        fields: [tinyint, bigint, char, varchar, text, decimal, double, timestamp]



filter:
  - method: 'public void filter(List<SyncData> list) {
             SyncData sync = list.get(0);
             sync.addExtra("suffix", "");
             switch (sync.getEntity()) {
               case "news":
                 sync.updateField("thumb_content", new String((byte[]) sync.getField("thumb_content"))).updateField("content", new String((byte[]) sync.getField("content")));
                 break;
               case "types":
               case "simple_type":
                 sync.updateField("text", new String((byte[]) sync.getField("text"))).updateField("tinyint", Byte.toUnsignedInt((byte)(int) sync.getField("tinyint")));
                 sync.addExtra("suffix", "-" + ((int) sync.getField("tinyint"))/128);
                 break;
               case "correctness":
                 sync.updateField("type", Byte.toUnsignedInt((byte)(int) sync.getField("type")));
                 break;
             }
           }'



# Special expression
# "field.*"
# "field.*.flatten"
# "extra.*"
# "extra.*.flatten"

output:
  elasticsearch:
    connection:
      clusterName: ${ES_CLUSTER}
      clusterNodes: ["${ES_ADDR}:9300"]
    requestMapping: # mapping from input data to es request
      enableExtraQuery: true
      retryOnUpdateConflict: 3
      index: "repo + getExtra('target')" # default: repo
      documentId: "id" # default: id
      fieldsMapping: # default: fields.*.flatten
        "fields": "fields.*.flatten"
    batch:
      size: 100
      delay: 1000
      maxRetry: 5
    refreshInMillis: 0
    failureLog:
      countLimit: 1000
  mysql:
    connection:
      address: ${MYSQL_ADDR}
      port: 3306
      user: root
      password: ${MYSQL_PASS}
    rowMapping:
      schema: "repo"
      table: "entity + '_bak'"
      id: "id"
      rows:
        "fields": "fields.*.flatten"
        "id": "id"
    batch:
      size: 100
      delay: 100
      maxRetry: 5
    failureLog:
      countLimit: 1000