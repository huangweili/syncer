package com.github.zzt93.syncer.config.consumer.output.kafka;

import com.github.zzt93.syncer.consumer.output.channel.kafka.SyncKafkaSerializer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Map;

/**
 * @author zzt
 */
public class MsgMapping {

  private String topic;
//  private String key; // have to be syncData#id
//  private String value; // now to be syncData
  /**
   * Serializer class for keys.
   */
  private Class<?> keySerializer = StringSerializer.class;

  /**
   * Serializer class for values.
   */
  private Class<?> valueSerializer = SyncKafkaSerializer.class;

  /**
   * Compression type for all data generated by the producer.
   */
  private String compressionType;
  private boolean includeBefore = false;

  public void buildProperties(Map<String, Object> properties) {
    if (compressionType != null) {
      properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, compressionType);
    }
    if (keySerializer != null) {
      properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, keySerializer);
    }
    if (valueSerializer != null) {
      properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer);
    }
  }

  public boolean isIncludeBefore() {
    return includeBefore;
  }

  public void setIncludeBefore(boolean includeBefore) {
    this.includeBefore = includeBefore;
  }

  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }
}
